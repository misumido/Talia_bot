from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from buttons import *
from states import ChangeAdminInfo
from aiogram.utils.deep_linking import create_start_link
from database.adminservice import *
from aiogram.types.input_file import FSInputFile
from excel_converter import convert_to_excel
import re
import os
# TODO id admina
admins_id = [305896408, ]
admin_router = Router()
# create_message_db()
# create_channel_db()
@admin_router.message(Command(commands=["admin"]))
async def admin_mm(message: Message):
    if message.from_user.id in admins_id:
        count = get_users_count()
        await message.bot.send_message(message.from_user.id, f"üïµ–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞\n"
                                                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {count}",
                                       reply_markup=await admin_menu_in())
@admin_router.callback_query(F.data.in_(["cancel", "none",
                                         "mailing", "excel_users", "excel_utm", "change_channel",
                                         "change_message", "change_message_success","change_chan_info",
                                         "add_bonus", "add_utm", "utm_info"]))
async def call_backs(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if query.data == "cancel":
        await query.bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
        await state.clear()
    elif query.data == "none":
        pass
    elif query.data == "mailing":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.mailing)
    elif query.data == "excel_users":
        try:
            file = convert_to_excel("user")
            document = FSInputFile(file)
            await query.bot.send_document(query.from_user.id, document)
            os.remove(file)
        except:
            await query.bot.send_message(query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif query.data == "excel_utm":
        try:
            file = convert_to_excel("utm")
            document = FSInputFile(file)
            await query.bot.send_document(query.from_user.id, document)
            os.remove(file)
        except:
            await query.bot.send_message(query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    elif query.data == "change_channel":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ–æ—Ä–º–∞—Ç: t.me/ –∏–ª–∏ https://t.me/)",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_url)
    elif query.data == "change_message":
        await query.bot.send_message(query.from_user.id, "–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å?",
                                     reply_markup=await change_messages_in())

    elif query.data == "change_message_success":
        await query.bot.send_message(query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                     reply_markup=await cancel_bt())
        await state.set_data({"what": "success"})
        await state.set_state(ChangeAdminInfo.change_message)
    elif query.data == "change_chan_info":
        await query.bot.send_message(query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                                     reply_markup=await cancel_bt())
        await state.set_data({"what": "info"})
        await state.set_state(ChangeAdminInfo.change_message)
    elif query.data == "add_bonus":
        await query.bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –±–æ–Ω—É—Å",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.bonus_amount)
    elif query.data == "add_utm":
        await query.bot.send_message(query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ UTM. –û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ "
                                                         f"–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä - –æ—Ç 7 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.",
                                     reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.bonus_amount)
    elif query.data == "utm_info":
        info = get_utm_info_db()
        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è UTM:\n\n"
        count = 1
        if info:
            for i in info:
                link = await create_start_link(query.bot, str(i[0]), encode=True)
                text += f"{count}. {i[0]}: {i[1]} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.\n –°—Å—ã–ª–∫–∞: {link}\n\n"
                count += 1
            await query.bot.send_message(query.from_user.id, text)
        else:
            await query.bot.send_message(query.from_user.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö UTM")




@admin_router.message(ChangeAdminInfo.utm)
async def add_utm(message: Message, state: FSMContext):
    if message.text:
        check = check_link_db(message.text)
        pattern = r'^[a-zA-Z0-9_]+$'
        check_pattern = re.search(pattern, message.text)
        if not check:
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text="üìõ –¢–∞–∫–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ;(\n"
                                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
                                           reply_markup= await main_menu_bt())
            await state.clear()
        elif check_pattern and 6 < len(message.text) < 31:
            link = await create_start_link(message.bot, str(message.from_user.id), encode=True)
            add_utm_db(message.text)
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text=f"–ù–æ–≤–∞—è UTM {message.text}:\n\n"
                                                f"{link}")
            await state.clear()
        else:
            await message.bot.send_message(chat_id=message.from_user.id,
                                           text="–û—à–∏–±–∫–∞! üìõ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.\n"
                                                "–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä - –æ—Ç 7 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(ChangeAdminInfo.bonus_amount)
async def get_bonus_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text.isdigit():
        await state.set_data({"amount": int(message.text)})
        await message.bot.send_message(message.from_user.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ–Ω—É—Å–∞",
                                       reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.bonus_info)
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.bonus_info)
async def get_bonus_info(message: Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        await state.clear()
        if message.text:
            add_bonus_db(type="text", amount=amount, text=message.text)
            await message.bot.send_message(message.from_user.id, "Ô∏è–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω")
        elif message.photo:
            if message.caption:
                add_bonus_db(type="photo",amount=amount, text=message.caption, media_id=message.photo[-1].file_id)
                await message.bot.send_message(message.from_user.id, "Ô∏è–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                add_bonus_db(type="photo",amount=amount, media_id=message.photo[-1].file_id)
                await message.bot.send_message(message.from_user.id, "Ô∏è–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω")
        elif message.video:
            if message.caption:
                add_bonus_db(type="video",amount=amount, text=message.caption, media_id=message.video.file_id)
                await message.bot.send_message(message.from_user.id, "Ô∏è–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                add_bonus_db(type="video",amount=amount, media_id=message.video.file_id)
                await message.bot.send_message(message.from_user.id, "Ô∏è–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω")

        else:
            await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
            await state.clear()


@admin_router.message(ChangeAdminInfo.change_message)
async def change_message(message: Message, state: FSMContext):
    data = await state.get_data()
    what = data.get("what")
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏è–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        if message.text:

            if what == "success":
                change_success_db(type="text", text=message.text)
            elif what == "info":
                change_info_message_db(type="text", text=message.text)
        elif message.photo:
            if message.caption:
                if what == "success":
                    change_success_db(type="photo", text=message.caption, media_id=message.photo[-1].file_id)
                elif what == "info":
                    change_info_message_db(type="photo", text=message.caption, media_id=message.photo[-1].file_id)
            else:
                if what == "success":
                    change_success_db(type="photo", media_id=message.photo[-1].file_id)
                elif what == "info":
                    change_info_message_db(type="photo", media_id=message.photo[-1].file_id)
        elif message.video:
            if message.caption:
                if what == "success":
                    change_success_db(type="video", text=message.caption, media_id=message.video.file_id)
                elif what == "info":
                    change_info_message_db(type="video", text=message.caption, media_id=message.video.file_id)
            else:
                if what == "success":
                    change_success_db(type="video", media_id=message.video.file_id)
                elif what == "info":
                    change_info_message_db(type="video", media_id=message.video.file_id)
        else:
            await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
            await state.clear()


@admin_router.message(ChangeAdminInfo.mailing)
async def mailing_admin(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    else:
        all_users = get_all_users_tg_id()
        success = 0
        unsuccess = 0
        for i in all_users:
            try:
                await message.bot.copy_message(chat_id=i, from_chat_id=message.from_user.id,
                                               message_id=message.message_id, reply_markup=message.reply_markup)
                success += 1
            except:
                unsuccess +=1
        await message.bot.send_message(message.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                                             f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                                                             f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {unsuccess}", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.get_channel_url)
async def get_new_channel_url(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif "t.me/" in message.text.lower() or "https://t.me/" in message.text.lower():
        await state.set_data({"chan_url": message.text})
        await message.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞\n"
                                                             "–£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–π "
                                                             "–ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –±–æ—Ç @getmyid_bot. "
                                                             "–ü–æ—Å–ª–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≥—Ä–∞—Ñ—ã 'Forwarded from chat:'",
                                       reply_markup=await cancel_bt())
        await state.set_state(ChangeAdminInfo.get_channel_id)
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=await main_menu_bt())
        await state.clear()
@admin_router.message(ChangeAdminInfo.get_channel_id)
async def get_new_channel_id(message: Message, state: FSMContext):
    if message.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await main_menu_bt())
        await state.clear()
    elif message.text:
        try:
            chanel_url = await state.get_data()
            channel_id = int(message.text)
            if channel_id > 0:
                channel_id *= -1
            new_channel = change_channel_db(url=chanel_url["chan_url"], id=channel_id)
            if new_channel:
                await message.bot.send_message(message.from_user.id, f"–ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω ‚úÖ\n"
                                                                     f"‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∏ –¥–∞—Ç—å –µ–º—É –∞–¥–º–∏–Ω–∫—É‚ùóÔ∏è",
                                               reply_markup=await main_menu_bt())
                await state.clear()
            else:
                await message.bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                                               reply_markup=await main_menu_bt())
                await state.clear()
        except:
            await message.bot.send_message(message.from_user.id, "üö´–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –î–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                           reply_markup=await main_menu_bt())
            await state.clear()
    else:
        await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è‚ùó–û—à–∏–±–∫–∞", reply_markup=await main_menu_bt())
        await state.clear()

@admin_router.message(F.text=="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å")
async def profile(message: Message, state: FSMContext):
    await message.bot.send_message(message.from_user.id, "Ô∏èÔ∏è–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=await main_menu_bt())
    await state.clear()
